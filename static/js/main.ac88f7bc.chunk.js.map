{"version":3,"sources":["pages/home/Home.tsx","utils/asyncComponent.tsx","pages/App/App.tsx","router/index.tsx","serviceWorker.ts","index.tsx"],"names":["Home","_react_16_11_0_react_default","a","createElement","className","Component","asyncComponent","importComponent","_Component","AsyncComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","component","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","_ref","wrap","_context","prev","next","sent","default","setState","stop","apply","arguments","C","Original","__webpack_require__","e","then","bind","Reprint","Essay","NAV_CONTENT","name","path","selectedStyle","color","Header","map","el","index","react_router_dom","to","activeStyle","Main","react_router","exact","App","App_Header","App_Main","PureComponent","Root","pages_App_App","Boolean","window","location","hostname","match","ReactDOM","render","router_Root","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac88f7bc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Home.scss';\nclass Home extends Component {\n\n    render() {\n        return (\n            <div className=\"home\">\n                <div className=\"earth\"></div>\n                <div className=\"earth-shadow\"></div>\n                <div className=\"ground-shadow\"></div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from \"react\";\n\ninterface IState {\n    component: any,\n}\nexport default function asyncComponent(importComponent: any) {\n  class AsyncComponent extends Component<{}, IState> {\n\n    constructor(props:  any) {\n      super(props);\n      this.state = {\n          component: null\n      }\n    }\n\n    async componentDidMount() {\n      const { default: component } = await importComponent();\n\n      this.setState({component});\n    }\n\n    render() {\n      const C = this.state.component;\n\n      return C ? <C {...this.props} /> : null;\n    }\n  }\n\n  return AsyncComponent;\n};","import React, { PureComponent } from 'react';\nimport { NavLink , Switch, Route , Redirect} from 'react-router-dom';\nimport './App.scss';\nimport Home from \"../home/Home\";\nimport asyncComponent from '../../utils/asyncComponent';\nconst Original = asyncComponent(() => import(\"../original/Original\"));\nconst Reprint = asyncComponent(() => import(\"../reprint/Reprint\"));\nconst Essay = asyncComponent(() => import(\"../essay/Essay\"));\n\n\nconst NAV_CONTENT = [\n    {\n        'name': '首页',\n        'path': '/home'\n    },\n    {\n        'name': '原创',\n        'path': '/original'\n    },\n    {\n        'name': '转载',\n        'path': '/reprint'\n    },\n    {\n        'name': '随笔',\n        'path': '/essay'\n    }\n];\n// 高亮的样式，表示我们在哪个导航下\nconst selectedStyle = {\n    color: 'blue'\n}\n\nconst Header = () => (\n    <header>\n        {\n            NAV_CONTENT.map((el,index)=> {\n                return  <NavLink to={el.path} activeStyle = {selectedStyle} key={index}>{el.name}</NavLink>\n            })\n        }\n    </header>\n);\n\n\nconst Main = () => (\n    <main className=\"content\">\n        <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route path='/home' component={Home}/>\n            <Route path='/original' component={Original}/>\n            <Route path='/reprint' component={Reprint}/>\n            <Route path='/essay' component={Essay}/>\n            <Redirect to='/'/>\n        </Switch>\n    </main>\n)\n\nclass App extends PureComponent {\n\n    render() {\n        return (\n            <div className=\"root\">\n                <Header></Header>\n                <Main></Main>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport { HashRouter } from 'react-router-dom';\n\n\nimport App from  '../pages/App/App';\n\n\n// react-router4 不再推荐将所有路由规则放在同一个地方集中式路由，子路由应该由父组件动态配置，组件在哪里匹配就在哪里渲染，更加灵活\nexport default class Root extends Component{\n  render(){\n    return(\n      <HashRouter>\n          <App/>\n      </HashRouter>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Root from './router'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}