{"version":3,"sources":["pages/home/Home.tsx","pages/help/Help.tsx","api/request.tsx","pages/home/NewsDetail.tsx","api/getData.tsx","pages/home/NewsList.tsx","router/router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["withRouter","props","react_default","a","createElement","className","react_router","to","renderRoutes","route","routes","Help","empty","description","instance","axios","create","baseURL","timeout","interceptors","request","use","config","url","concat","error","Promise","reject","response","res","data","code","resolve","msg","_useState","useState","content","cover","title","_useState2","Object","slicedToArray","detail","setDetail","useEffect","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","getListDetail","match","params","id","stop","newsId","http","get","objectSpread2","then","dangerouslySetInnerHTML","__html","TabPane","path","exact","component","Home","_useReducer","useReducer","state","action","type","list","types","typeId","Error","_useReducer2","dispatch","getNews","_ref","result","page","sent","_x","apply","this","arguments","_callee2","_context2","history","useHistory","handleChange","_ref3","_callee3","_context3","_x2","length","tabs","defaultActiveKey","String","onChange","map","tab","typeName","key","itemLayout","dataSource","renderItem","item","Item","onClick","push","postTime","source","NewsDetail","Header","Content","Footer","Menu","row","col","span","offset","react_router_dom","activeClassName","activeStyle","color","App","sentence","setSentence","word","layout","App_Menu","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b101f9a5.chunk.js","sourcesContent":["import React from 'react';\nimport './Home.scss';\nimport {renderRoutes} from 'react-router-config';\nimport { withRouter, Redirect} from 'react-router-dom'\nconst Home = (props) => {\n    return <div className=\"home\">\n        <Redirect to=\"/home/list\"></Redirect>\n        {renderRoutes(props.route.routes)}\n    </div>\n}\nexport default withRouter(Home);","import React from 'react';\nimport { Empty } from 'antd';\n\nconst Help = () => {\n    return (\n        <div className=\"help\">\n            <Empty description=\"暂无数据\"></Empty>\n        </div>\n    );\n}\nexport default Help;","import axios from 'axios';\nconst baseURL: string = 'https://www.mxnzp.com/api/';\nconst instance = axios.create({\n    baseURL, // 公共地址\n    // withCredentials: true, // send cookies when cross-domain requests\n    timeout: 3000 // 超时\n});\ninstance.interceptors.request.use(\n    config => {\n        config.url = `${config.url}?app_id=ykholzngnvdqlrvn&app_secret=RVBocWEzUFJkYm1yMlFobHVnNnFtdz09`;\n        // 请求头携带token\n        // config.headers['AuthToken'] = 'your.token';\n        return config;\n    },\n    error => {\n        return Promise.reject(error)\n    }\n);\ninstance.interceptors.response.use(\n    // @ts-ignore\n    response => {\n        const res = response.data;\n        if(res.code === 1) {\n            return Promise.resolve(res);\n        }\n        throw Promise.reject(res.msg);\n    },\n    error => {\n        return Promise.reject(error)\n    }\n);\nexport default instance;","import React, { useState, useEffect} from 'react';\nimport { withRouter} from 'react-router-dom';\nimport {getNewsDetail} from \"../../api/getData\";\nimport { Empty } from 'antd';\nimport './Home.scss';\nconst NewsDetail = (props: {\n    match: {\n        params: {\n            id: string\n        }\n    }\n}) => {\n    const [detail, setDetail] = useState<{\n        content: string,\n        cover: string,\n        title: string\n    }>({\n        content: '',\n        cover: '',\n        title: ''\n    });\n    useEffect(()=> {\n        (async () => {\n            getListDetail(props.match.params.id);\n        })();\n    }, [props.match.params.id]);\n    const getListDetail = (newsId: string) => {\n        getNewsDetail({\n            newsId: newsId\n        }).then(res => {\n            if(res.data) {\n                setDetail(res.data);\n            }\n        })\n    }\n    return (\n        <div className=\"detail\">\n            {\n                detail.content ?  <div className=\"article-intro\">\n                    <h2>{detail.title}</h2>\n                    <article  dangerouslySetInnerHTML={{__html: detail.content}}></article>\n                </div>: <Empty description=\"暂无数据\"/>\n            }\n        </div>\n    );\n}\n\nexport default withRouter(NewsDetail);","import http from './request';\n\nexport const getNewsTypes = (params) => http.get('/news/types', {params: { ...params }});\nexport const getNewsList = (params) => http.get('/news/list', {params: { ...params }});\nexport const getNewsDetail = (params) => http.get('/news/details', {params: { ...params }});\nexport const getSentence = (params) => http.get('/daily_word/recommend', {params: { ...params }});\n","import React, { useEffect, useReducer} from 'react';\nimport { useHistory, withRouter} from 'react-router-dom';\nimport {getNewsList, getNewsTypes} from \"../../api/getData\";\nimport './Home.scss';\nimport { List , Tabs } from 'antd';\nconst { TabPane } = Tabs;\ninterface listItem {\n    title: string,\n    imgList: null | string,\n    source: string,\n    newsId: string,\n    digest?: string,\n    postTime: string\n}\ninterface typeItem {\n    typeId: number,\n    typeName: string\n}\nconst NewsList = () => {\n    const initialState = {\n        list: [],\n        types: [],\n        typeId: 0,\n    };\n    function myReducer(state, action) {\n        switch(action.type) {\n            case 'changeList':\n                return {\n                    ...state,\n                    list: action.list\n                }\n            case 'changeTypes':\n                return {\n                    ...state,\n                    types: action.types\n                }\n            case 'changeTypeId':\n                return {\n                    ...state,\n                    typeId: action.typeId\n                }\n            default:\n                throw new Error();\n        }\n    }\n    const [state, dispatch] = useReducer(myReducer, initialState);\n    const getNews = (async (typeId:number) => {\n        const result = await getNewsList({typeId: typeId,page: 1});\n        dispatch({type: 'changeList', list: result.data})\n    });\n    useEffect(()=> {\n        (async () => {\n            const types = await getNewsTypes({});\n            dispatch({type: 'changeTypes', types: types.data});\n            dispatch({type: 'changeTypeId', typeId: types.data[0].typeId});\n            await getNews(types.data[0].typeId);\n        })();\n    }, []);\n    const history = useHistory();\n    const handleChange = async (typeId) => {\n        dispatch({type: 'changeTypeId', typeId: typeId});\n        await getNews(typeId);\n    }\n    const goDetail = (newsId: string) => {\n        history.push(`/home/detail/${newsId}`);\n    }\n    return (\n        <div className=\"home\">\n            {\n                state.types.length > 0 && <Tabs\n                    defaultActiveKey={String(state.typeId)}\n                    onChange={handleChange}>\n                    {\n                        state.types.map((type: typeItem) => {\n                            return  <TabPane tab={type.typeName} key={type.typeId}>\n                                {\n                                    state.list && state.list.length > 0 &&  <List\n                                        itemLayout=\"horizontal\"\n                                        dataSource={state.list}\n                                        renderItem={(item: listItem) => (\n                                            <List.Item onClick={() => goDetail(item.newsId)}>\n                                                <div>{item.title}</div>\n                                                <div className=\"post-time\">\n                                                    <span>{item.postTime}</span>\n                                                    <span>{item.source}</span>\n                                                </div>\n                                            </List.Item>\n                                        )}\n                                    />\n                                }\n                            </TabPane>\n                        })\n                    }\n                </Tabs>\n            }\n        </div>\n    );\n};\n\nexport default withRouter(NewsList);","import React from 'react';\nimport Home from \"../pages/home/Home\";\nimport Help from \"../pages/help/Help\";\nimport NewsDetail from \"../pages/home/NewsDetail\";\nimport NewsList from \"../pages/home/NewsList\";\nfunction NotFound() {\n    return <h2>404</h2>\n}\nconst routes = [\n    {\n        path: '/',\n        exact: true,\n        component: Home\n    },\n    {\n        path: '/home',\n        component: Home,\n        routes: [\n            {\n                path: \"/home/list\",\n                exact: true,\n                component: NewsList\n            },\n            {\n                path: \"/home/detail/:id\",\n                exact: true,\n                component: NewsDetail\n            }\n        ]\n    },\n    {\n        path: '/help',\n        exact: true,\n        component: Help,\n        routes: []\n    },\n    {\n        path: '*',\n        component: NotFound,\n        routes: []\n    }\n];\nexport default routes;","import React, { useState,useEffect } from 'react';\nimport {  NavLink,  HashRouter } from 'react-router-dom';\nimport { renderRoutes } from 'react-router-config'\nimport { Layout , Row, Col } from 'antd';\nimport './App.scss';\nimport routes from \"./router/router\";\nimport { getSentence } from \"./api/getData\";\nconst { Header, Content, Footer } = Layout;\n\nconst Menu = () => {\n    return (\n            <Row>\n                <Col span={8}></Col>\n                <Col span={4} offset={12}>\n                    <NavLink className=\"menu-link\" activeClassName=\"active\" activeStyle={{color: '#1DA57A'}} to='/home'>首页</NavLink>\n                    <NavLink className=\"menu-link\" activeClassName=\"active\" activeStyle={{color: '#1DA57A'}} to='/help'>帮助</NavLink>\n                </Col>\n            </Row>\n    )\n}\n\nconst App = (props) => {\n    const [sentence, setSentence] = useState<string>('');\n    useEffect(()=> {\n        (async () => {\n            let result = await getSentence({});\n            let word = result.data && result.data[0].content;\n            setSentence(word)\n        })()\n    },[])\n    return (\n        <div className=\"root\">\n            <Layout className=\"lan-layout\">\n                <HashRouter>\n                        <Header className=\"lan-header\">\n                            <Menu></Menu>\n                        </Header>\n                        <Content className=\"lan-content\">\n                            {renderRoutes(routes)}\n                        </Content>\n                        <Footer className=\"lan-footer\">\n                            {sentence}\n                        </Footer>\n                </HashRouter>\n            </Layout>\n        </div>\n    )\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css/normalize.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}