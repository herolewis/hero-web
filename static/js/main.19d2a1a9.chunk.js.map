{"version":3,"sources":["App.tsx","pages/home/index.tsx","pages/home/notes/index.tsx","api/request.tsx","pages/home/news/list.tsx","router/routes.tsx","pages/help/index.tsx","api/getData.tsx","pages/home/news/detail.tsx","router/index.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","react_default","a","createElement","react_router","routes","map","item","index","path","exact","render","component","Object","assign","key","Content","Sider","withRouter","history","useHistory","layout","className","width","theme","menu","onClick","res","console","log","name","find","push","defaultSelectedKeys","Item","style","padding","margin","minHeight","background","route","to","Notes","empty","description","instance","axios","create","baseURL","timeout","interceptors","request","use","config","url","concat","error","Promise","reject","response","data","code","msg","TabPane","Home","redirect","_useReducer","useReducer","state","action","type","objectSpread2","list","types","typeId","Error","_useReducer2","slicedToArray","dispatch","getNews","_ref","asyncToGenerator","regenerator_default","mark","_callee","result","wrap","_context","prev","next","params","page","http","get","sent","stop","_x","apply","this","arguments","useEffect","_callee2","_context2","handleChange","_ref3","_callee3","_context3","_x2","length","tabs","defaultActiveKey","String","onChange","tab","typeName","itemLayout","dataSource","renderItem","newsId","title","postTime","source","_useState","useState","content","cover","_useState2","detail","setDetail","id","match","getListDetail","then","dangerouslySetInnerHTML","__html","RouterConf","react_router_dom","Boolean","window","location","hostname","root","document","getElementById","ReactDOM","router","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAoBeA,EAlBH,SAACC,GACT,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEQJ,EAAMK,OAAOC,IAAI,SAACC,EAAMC,GACpB,OAAOP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOK,KAAMF,EAAKE,KACXC,MAAOH,EAAKG,MACZC,OAAQ,SAAAX,GACJ,OAAOC,EAAAC,EAAAC,cAACI,EAAKK,UAANC,OAAAC,OAAA,GAAoBd,EAApB,CAA2BK,OAAQE,EAAKF,WAEnDU,IAAKP,0CCR/BQ,uBAASC,YAuEFC,cAtEF,SAAClB,GACV,IAAMmB,EAAUC,cAoBhB,OACInB,EAAAC,EAAAC,cAAAkB,EAAA,GAAQC,UAAU,YACdrB,EAAAC,EAAAC,cAACc,EAAD,CAAOM,MAAO,IAAKD,UAAU,YAAYE,MAAM,SAC3CvB,EAAAC,EAAAC,cAAAsB,EAAA,GACIC,QATI,SAACC,GACjBC,QAAQC,IAAIF,EAAI,UAChB,IAAIlB,EAfG,CACH,CACIM,IAAK,IACLe,KAAM,2BACNrB,KAAM,cAEV,CACIM,IAAK,IACLe,KAAM,2BACNrB,KAAM,gBAMQsB,KAAK,SAAAxB,GAAI,OAAIA,EAAKQ,MAAQY,EAAIZ,MAAMN,KAC1DU,EAAQa,KAAKvB,IAODwB,oBAAqB,CAAC,MAvB3B,CACH,CACIlB,IAAK,IACLe,KAAM,2BACNrB,KAAM,cAEV,CACIM,IAAK,IACLe,KAAM,2BACNrB,KAAM,gBAiBaH,IAAI,SAAAC,GACX,OACIN,EAAAC,EAAAC,cAAAsB,EAAA,EAAMS,KAAN,CAAWnB,IAAKR,EAAKQ,KAChBR,EAAKuB,UAO9B7B,EAAAC,EAAAC,cAAAkB,EAAA,GAAQc,MAAO,CAAEC,QAAS,gBACtBnC,EAAAC,EAAAC,cAACa,EAAD,CACIM,UAAU,cACVa,MAAO,CACHC,QAAS,GACTC,OAAQ,EACRC,UAAW,IACXC,WAAY,SAGhBtC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEQJ,EAAMK,OAAOC,IAAI,SAACkC,EAAOhC,GACrB,OAAOP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOK,KAAM+B,EAAM/B,KACZC,MAAO8B,EAAM9B,MACbC,OAAQ,SAAAX,GAEJ,OAAOC,EAAAC,EAAAC,cAACqC,EAAM5B,UAAPC,OAAAC,OAAA,GAAqBd,EAArB,CAA4BK,OAAQmC,EAAMnC,WAErDU,IAAKP,MAI3BP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUqC,GAAG,qCCzDtBC,UAPD,WACV,OACIzC,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,SACXrB,EAAAC,EAAAC,cAAAwC,EAAA,GAAOC,YAAY,oHCJzBC,SAAWC,EAAMC,OAAO,CAC1BC,QAFoB,6BAIpBC,QAAS,MAEbJ,EAASK,aAAaC,QAAQC,IAC1B,SAAAC,GAMI,OALAA,EAAOC,IAAP,GAAAC,OAAgBF,EAAOC,IAAvB,wEAKOD,GAEX,SAAAG,GACI,OAAOC,QAAQC,OAAOF,KAG9BX,EAASK,aAAaS,SAASP,IAE3B,SAAAO,GACI,IAAMhC,EAAMgC,EAASC,KACrB,GAAgB,IAAbjC,EAAIkC,KACH,OAAOlC,EAEX,MAAM8B,QAAQC,OAAO/B,EAAImC,MAE7B,SAAAN,GACI,OAAOC,QAAQC,OAAOF,KAGfX,QC7BPkB,cCyCO1D,EA9BkB,CAC7B,CACII,KAAM,QACNG,UCfM,WACV,OACIX,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,QACXrB,EAAAC,EAAAC,cAAAwC,EAAA,GAAOC,YAAY,+BDavBlC,OAAO,EACPL,OAAQ,IAEZ,CACII,KAAM,IACNG,UAAWb,EACXM,OAAQ,CAAC,CACLI,KAAM,QACNG,UAAWoD,EACXC,SAAU,aACV5D,OAAQ,CAAC,CACLI,KAAM,aACNG,UDmEDM,YAjFD,WAAM,IAAAgD,EA2BUC,qBArB1B,SAAmBC,EAAOC,GACtB,OAAOA,EAAOC,MACV,IAAK,aACD,OAAOzD,OAAA0D,EAAA,EAAA1D,QAAA0D,EAAA,EAAA1D,CAAA,GACAuD,GADP,IAEII,KAAMH,EAAOG,OAErB,IAAK,cACD,OAAO3D,OAAA0D,EAAA,EAAA1D,QAAA0D,EAAA,EAAA1D,CAAA,GACAuD,GADP,IAEIK,MAAOJ,EAAOI,QAEtB,IAAK,eACD,OAAO5D,OAAA0D,EAAA,EAAA1D,QAAA0D,EAAA,EAAA1D,CAAA,GACAuD,GADP,IAEIM,OAAQL,EAAOK,SAEvB,QACI,MAAM,IAAIC,QAvBD,CACjBH,KAAM,GACNC,MAAO,GACPC,OAAQ,IAJIE,EAAA/D,OAAAgE,EAAA,EAAAhE,CAAAqD,EAAA,GA2BTE,EA3BSQ,EAAA,GA2BFE,EA3BEF,EAAA,GA4BVG,EAAO,eAAAC,EAAAnE,OAAAoE,EAAA,EAAApE,CAAAqE,EAAAhF,EAAAiF,KAAI,SAAAC,EAAOV,GAAP,IAAAW,EAAA,OAAAH,EAAAhF,EAAAoF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EG1COC,EH2Ca,CAAChB,OAAQA,EAAOiB,KAAM,GG3CxBC,EAAKC,IAAI,aAAc,CAACH,OAAO7E,OAAA0D,EAAA,EAAA1D,CAAA,GAAM6E,KH0CvD,OACPL,EADOE,EAAAO,KAEbhB,EAAS,CAACR,KAAM,aAAcE,KAAMa,EAAOzB,OAF9B,wBAAA2B,EAAAQ,OG1CM,IAACL,GH0CPN,MAAJ,gBAAAY,GAAA,OAAAhB,EAAAiB,MAAAC,KAAAC,YAAA,GAIbC,oBAAU,WACNvF,OAAAoE,EAAA,EAAApE,CAAAqE,EAAAhF,EAAAiF,KAAC,SAAAkB,IAAA,IAAA5B,EAAA,OAAAS,EAAAhF,EAAAoF,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAAAa,EAAAb,KAAA,EGhDoBC,EHiDgB,GGjDLE,EAAKC,IAAI,cAAe,CAACH,OAAO7E,OAAA0D,EAAA,EAAA1D,CAAA,GAAM6E,KHgDrE,cACSjB,EADT6B,EAAAR,KAEGhB,EAAS,CAACR,KAAM,cAAeG,MAAOA,EAAMb,OAC5CkB,EAAS,CAACR,KAAM,eAAgBI,OAAQD,EAAMb,KAAK,GAAGc,SAHzD4B,EAAAb,KAAA,EAISV,EAAQN,EAAMb,KAAK,GAAGc,QAJ/B,wBAAA4B,EAAAP,OGhDmB,IAACL,GHgDpBW,KAADxF,IAMD,IACH,IAAMM,EAAUC,cACVmF,EAAY,eAAAC,EAAA3F,OAAAoE,EAAA,EAAApE,CAAAqE,EAAAhF,EAAAiF,KAAG,SAAAsB,EAAO/B,GAAP,OAAAQ,EAAAhF,EAAAoF,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cACjBX,EAAS,CAACR,KAAM,eAAgBI,OAAQA,IADvBgC,EAAAjB,KAAA,EAEXV,EAAQL,GAFG,wBAAAgC,EAAAX,SAAAU,MAAH,gBAAAE,GAAA,OAAAH,EAAAP,MAAAC,KAAAC,YAAA,GAOlB,OACIlG,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,QAEP8C,EAAMK,MAAMmC,OAAS,GAAK3G,EAAAC,EAAAC,cAAA0G,EAAA,GACtBC,iBAAkBC,OAAO3C,EAAMM,QAC/BsC,SAAUT,GAENnC,EAAMK,MAAMnE,IAAI,SAACgE,GACb,OAAQrE,EAAAC,EAAAC,cAAC4D,EAAD,CAASkD,IAAK3C,EAAK4C,SAAUnG,IAAKuD,EAAKI,QAEvCN,EAAMI,MAAQJ,EAAMI,KAAKoC,OAAS,GAAM3G,EAAAC,EAAAC,cAAAqE,EAAA,GACpC2C,WAAW,aACXC,WAAYhD,EAAMI,KAClB6C,WAAY,SAAC9G,GAAD,OACRN,EAAAC,EAAAC,cAAAqE,EAAA,EAAMtC,KAAN,CAAWR,QAAS,kBAjB1C4F,EAiByD/G,EAAK+G,YAhB5EnG,EAAQa,KAAR,gBAAAuB,OAA6B+D,IADhB,IAACA,IAkB0BrH,EAAAC,EAAAC,cAAA,WAAMI,EAAKgH,OACXtH,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,aACXrB,EAAAC,EAAAC,cAAA,YAAOI,EAAKiH,UACZvH,EAAAC,EAAAC,cAAA,YAAOI,EAAKkH,oBCnDhDpH,OAAQ,IACV,CACEI,KAAM,mBACNG,UGGDM,YAnCA,SAAClB,GAAc,IAAA0H,EACEC,mBAIzB,CACCC,QAAS,GACTC,MAAO,GACPN,MAAO,KAReO,EAAAjH,OAAAgE,EAAA,EAAAhE,CAAA6G,EAAA,GACnBK,EADmBD,EAAA,GACXE,EADWF,EAAA,GAU1B1B,oBAAU,WACNvF,OAAAoE,EAAA,EAAApE,CAAAqE,EAAAhF,EAAAiF,KAAC,SAAAC,IAAA,IAAA6C,EAAA,OAAA/C,EAAAhF,EAAAoF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACWwC,EAAOjI,EAAMkI,MAAMxC,OAAnBuC,GACRE,EAAcF,GAFjB,wBAAA1C,EAAAQ,SAAAX,KAADvE,IAID,IACH,IAAMsH,EAAgB,SAACb,GDfE,IAAC5B,KCgBR,CACV4B,OAAQA,GDjBqB1B,EAAKC,IAAI,gBAAiB,CAACH,OAAO7E,OAAA0D,EAAA,EAAA1D,CAAA,GAAM6E,MCkBtE0C,KAAK,SAAAzG,GACDA,EAAIiC,MACHoE,EAAUrG,EAAIiC,SAI1B,OACI3D,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,UACXrB,EAAAC,EAAAC,cAAA,UAAK4H,EAAOR,OACZtH,EAAAC,EAAAC,cAAA,OAAMkI,wBAAyB,CAACC,OAAQP,EAAOH,cHK3CvH,OAAQ,IACV,CACEI,KAAM,cACNG,UAAW8B,EACXrC,OAAQ,iBIXTkI,EApBI,WACf,OACItI,EAAAC,EAAAC,cAACqI,EAAA,EAAD,KACIvI,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEQC,EAAOC,IAAI,SAACkC,EAAkBhC,GAC1B,OAAOP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOK,KAAM+B,EAAM/B,KACZC,MAAO8B,EAAM9B,MACbC,OAAQ,SAAAX,GAEJ,OAAOC,EAAAC,EAAAC,cAACqC,EAAM5B,UAAPC,OAAAC,OAAA,GAAqBd,EAArB,CAA4BK,OAAQmC,EAAMnC,WAErDU,IAAKP,SCTvBiI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DCZN,IAAMW,EAA2BC,SAASC,eAAe,QAEzDC,IAASrI,OAAOV,EAAAC,EAAAC,cAAC8I,EAAD,MAAeJ,GDiIzB,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMhB,KAAK,SAAAiB,GACjCA,EAAaC","file":"static/js/main.19d2a1a9.chunk.js","sourcesContent":["import React from 'react';\nimport { Switch,Route,Redirect } from 'react-router-dom';\nconst App = (props) => {\n    return (\n        <Switch>\n            {\n                props.routes.map((item, index) => {\n                    return <Route path={item.path}\n                                  exact={item.exact}\n                                  render={props => {\n                                      return <item.component {...props} routes={item.routes}/>\n                                  }}\n                                  key={index}>\n                    </Route>\n                })\n            }\n        </Switch>\n    )\n}\n\nexport default App;","import React from 'react';\nimport {withRouter, Switch, Route, useHistory,Redirect} from 'react-router-dom';\nimport { Menu , Layout } from 'antd';\nimport './index.scss';\nconst { Content, Sider } = Layout;\nconst Home = (props) => {\n    const history = useHistory();\n    const MenuList = () => {\n        return [\n            {\n                key: '1',\n                name: '新闻资讯',\n                path: '/home/list'\n            },\n            {\n                key: '2',\n                name: '我的笔记',\n                path: '/home/notes'\n            }\n        ]\n    }\n    const handleClick = (res) => {\n        console.log(res,'result')\n        let path = MenuList().find(item => item.key === res.key)!.path;\n        history.push(path);\n    }\n    return (\n        <Layout className=\"lan-home\">\n            <Sider width={200} className=\"lan-sider\" theme=\"light\">\n                <Menu\n                    onClick={handleClick}\n                    defaultSelectedKeys={['1']}\n                >\n                    {\n                        MenuList().map(item => {\n                            return (\n                                <Menu.Item key={item.key}>\n                                    {item.name}\n                                </Menu.Item>\n                            )\n                        })\n                    }\n                </Menu>\n            </Sider>\n            <Layout style={{ padding: '0 24px 24px' }}>\n                <Content\n                    className=\"lan-content\"\n                    style={{\n                        padding: 24,\n                        margin: 0,\n                        minHeight: 280,\n                        background: '#FFF'\n                    }}\n                >\n                    <Switch>\n                        {\n                            props.routes.map((route, index: number) => {\n                                return <Route path={route.path}\n                                              exact={route.exact}\n                                              render={props => {\n                                                  // @ts-ignore\n                                                  return <route.component {...props} routes={route.routes}/>\n                                              }}\n                                              key={index}>\n                                </Route>\n                            })\n                        }\n                        <Redirect to=\"/home/list\"></Redirect>\n                    </Switch>\n                </Content>\n            </Layout>\n        </Layout>\n    )\n};\n\nexport default withRouter(Home);","import React from 'react';\nimport { Empty } from 'antd';\nimport './index.scss';\nconst Notes = () => {\n    return (\n        <div className=\"notes\">\n            <Empty description=\"暂无数据\"></Empty>\n        </div>\n    );\n}\nexport default Notes;","import axios from 'axios';\nconst baseURL: string = 'https://www.mxnzp.com/api/';\nconst instance = axios.create({\n    baseURL, // 公共地址\n    // withCredentials: true, // send cookies when cross-domain requests\n    timeout: 3000 // 超时\n});\ninstance.interceptors.request.use(\n    config => {\n        config.url = `${config.url}?app_id=ykholzngnvdqlrvn&app_secret=RVBocWEzUFJkYm1yMlFobHVnNnFtdz09`;\n        // 请求头携带token\n        // config.headers['AuthToken'] = 'your.token';\n        // config.headers['app_id'] = 'ykholzngnvdqlrvn';\n        // config.headers['app_secret'] = 'RVBocWEzUFJkYm1yMlFobHVnNnFtdz09';\n        return config;\n    },\n    error => {\n        return Promise.reject(error)\n    }\n);\ninstance.interceptors.response.use(\n    // @ts-ignore\n    response => {\n        const res = response.data;\n        if(res.code === 1) {\n            return res;\n        }\n        throw Promise.reject(res.msg);\n    },\n    error => {\n        return Promise.reject(error)\n    }\n);\nexport default instance;","import React, { useEffect, useReducer} from 'react';\nimport { useHistory, withRouter} from 'react-router-dom';\nimport {getNewsList, getNewsTypes} from \"../../../api/getData\";\nimport { List , Tabs } from 'antd';\nconst { TabPane } = Tabs;\ninterface listItem {\n    title: string,\n    imgList: null | string,\n    source: string,\n    newsId: string,\n    digest?: string,\n    postTime: string\n}\ninterface typeItem {\n    typeId: number,\n    typeName: string\n}\nconst Index = () => {\n    const initialState = {\n        list: [],\n        types: [],\n        typeId: 0,\n    };\n    function myReducer(state, action) {\n        switch(action.type) {\n            case 'changeList':\n                return {\n                    ...state,\n                    list: action.list\n                }\n            case 'changeTypes':\n                return {\n                    ...state,\n                    types: action.types\n                }\n            case 'changeTypeId':\n                return {\n                    ...state,\n                    typeId: action.typeId\n                }\n            default:\n                throw new Error();\n        }\n    }\n    const [state, dispatch] = useReducer(myReducer, initialState);\n    const getNews = (async (typeId:number) => {\n        const result = await getNewsList({typeId: typeId,page: 1});\n        dispatch({type: 'changeList', list: result.data})\n    });\n    useEffect(()=> {\n        (async () => {\n            const types = await getNewsTypes({});\n            dispatch({type: 'changeTypes', types: types.data});\n            dispatch({type: 'changeTypeId', typeId: types.data[0].typeId});\n            await getNews(types.data[0].typeId);\n        })();\n    }, []);\n    const history = useHistory();\n    const handleChange = async (typeId) => {\n        dispatch({type: 'changeTypeId', typeId: typeId});\n        await getNews(typeId);\n    }\n    const goDetail = (newsId: string) => {\n        history.push(`/home/detail/${newsId}`);\n    }\n    return (\n        <div className=\"home\">\n            {\n                state.types.length > 0 && <Tabs\n                    defaultActiveKey={String(state.typeId)}\n                    onChange={handleChange}>\n                    {\n                        state.types.map((type: typeItem) => {\n                            return  <TabPane tab={type.typeName} key={type.typeId}>\n                                {\n                                    state.list && state.list.length > 0 &&  <List\n                                        itemLayout=\"horizontal\"\n                                        dataSource={state.list}\n                                        renderItem={(item: listItem) => (\n                                            <List.Item onClick={() => goDetail(item.newsId)}>\n                                                <div>{item.title}</div>\n                                                <div className=\"post-time\">\n                                                    <span>{item.postTime}</span>\n                                                    <span>{item.source}</span>\n                                                </div>\n                                            </List.Item>\n                                        )}\n                                    />\n                                }\n                            </TabPane>\n                        })\n                    }\n                </Tabs>\n            }\n        </div>\n    );\n};\n\nexport default withRouter(Index);","import React from 'react';\nimport App from '../App';\nimport Home from '../pages/home';\nimport Notes from \"../pages/home/notes\";\nimport List from '../pages/home/news/list';\nimport Detail from '../pages/home/news/detail';\nimport Help from '../pages/help';\nexport interface RouteItem {\n    path: string,\n    component: React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined,\n    exact?: boolean,\n    redirect?: string,\n    routes: Array<RouteItem>\n}\n// 登录页\nconst routes: Array<RouteItem> = [\n    {\n        path: \"/help\",\n        component: Help,\n        exact: true,\n        routes: []\n    },\n    {\n        path: \"/\",\n        component: App,\n        routes: [{\n            path: \"/home\",\n            component: Home,\n            redirect: \"/home/list\",\n            routes: [{\n                path: \"/home/list\",\n                component: List,\n                routes: [],\n            },{\n                path: \"/home/detail/:id\",\n                component: Detail,\n                routes: [],\n            },{\n                path: '/home/notes',\n                component: Notes,\n                routes: []\n            }]\n        }]\n    }\n]\nexport default routes","import React from 'react';\nimport { Empty } from 'antd';\n\nconst Index = () => {\n    return (\n        <div className=\"help\">\n            <Empty description=\"暂无数据\"></Empty>\n        </div>\n    );\n}\nexport default Index;","import http from './request';\n\nexport const getNewsTypes = (params) => http.get('/news/types', {params: { ...params }});\nexport const getNewsList = (params) => http.get('/news/list', {params: { ...params }});\nexport const getNewsDetail = (params) => http.get('/news/details', {params: { ...params }});\nexport const getSentence = (params) => http.get('/daily_word/recommend', {params: { ...params }});\n","import React, { useState, useEffect} from 'react';\nimport { withRouter} from 'react-router-dom';\nimport {getNewsDetail} from \"../../../api/getData\";\nconst Detail = (props:any) => {\n    const [detail, setDetail] = useState<{\n        content: string,\n        cover: string,\n        title: string\n    }>({\n        content: '',\n        cover: '',\n        title: ''\n    });\n    useEffect(()=> {\n        (async () => {\n            const { id } = props.match.params;\n            getListDetail(id);\n        })();\n    }, []);\n    const getListDetail = (newsId: string) => {\n        getNewsDetail({\n            newsId: newsId\n        }).then(res => {\n            if(res.data) {\n                setDetail(res.data);\n            }\n        })\n    }\n    return (\n        <div className=\"detail\">\n            <h2>{detail.title}</h2>\n            <div  dangerouslySetInnerHTML={{__html: detail.content}}>\n\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(Detail);","import React from 'react';\nimport routes from './routes'\nimport {\n    HashRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport {RouteItem} from \"./routes\";\n\nconst RouterConf = () => {\n    return (\n        <Router>\n            <Switch>\n                {\n                    routes.map((route: RouteItem, index: number) => {\n                        return <Route path={route.path}\n                                      exact={route.exact}\n                                      render={props => {\n                                          // @ts-ignore\n                                          return <route.component {...props} routes={route.routes}/>\n                                      }}\n                                      key={index}>\n                        </Route>\n                    })\n                }\n            </Switch>\n        </Router>\n    )\n}\nexport default RouterConf;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css/normalize.css';\nimport RouterConf from './router';\nimport * as serviceWorker from './serviceWorker';\n\nconst root: HTMLElement | null = document.getElementById('root')\n\nReactDOM.render(<RouterConf/>, root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}