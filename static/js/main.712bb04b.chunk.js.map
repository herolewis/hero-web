{"version":3,"sources":["utils/asyncComponent.js","pages/home/Home.tsx","router/index.tsx","serviceWorker.ts","index.tsx"],"names":["importComponent","NAV_CONTENT","Home","state","currentIndex","onNavClick","index","_this","setState","_this2","this","react_default","a","createElement","className","map","el","classnames","nav-item","active","key","onClick","Component","record","Promise","all","__webpack_require__","e","then","bind","_Component","AsyncComponent","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","component","inherits","createClass","value","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","_ref","wrap","_context","prev","next","sent","default","stop","apply","arguments","C","Root","react_router_dom","react_router","path","exact","home","to","Boolean","window","location","hostname","match","ReactDOM","render","router_Root","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAEuCA,mBCCjCC,SAAc,CAAC,eAAK,eAAK,eAAK,iBAoCrBC,6MAlCbC,MAAQ,CACNC,aAAc,KAEhBC,WAAa,SAACC,GACVC,EAAKC,SAAS,CACZJ,aAAcE,6EAGX,IAAAG,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAEVb,EAAYc,IAAI,SAACC,EAAGV,GAClB,OAAQK,EAAAC,EAAAC,cAAA,MAAIC,UAAWG,IAAW,CAACC,YAAY,EAAMC,OAAUb,IAAUG,EAAKN,MAAMC,eAAgBgB,IAAKd,EAAOe,QAAS,kBAAKZ,EAAKJ,WAAWC,KAASU,OAKjKL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,sBAxBDS,aCCbC,GFHiCvB,EEGT,kBAAMwB,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YFHoB,SAAAC,GAEpD,SAAAC,EAAYC,GAAO,IAAAzB,EAAA,OAAA0B,OAAAC,EAAA,EAAAD,CAAAvB,KAAAqB,IACjBxB,EAAA0B,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA3B,KAAMsB,KAED7B,MAAQ,CACXmC,UAAW,MAJI/B,EAFiC,OAAA0B,OAAAM,EAAA,EAAAN,CAAAF,EAAAD,GAAAG,OAAAO,EAAA,EAAAP,CAAAF,EAAA,EAAAX,IAAA,oBAAAqB,MAAA,eAAAC,EAAAT,OAAAU,EAAA,EAAAV,CAAAW,EAAAhC,EAAAiC,KAAA,SAAAC,IAAA,IAAAC,EAAAT,EAAA,OAAAM,EAAAhC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAWbnD,IAXa,OAAA+C,EAAAE,EAAAG,KAWjCd,EAXiCS,EAW1CM,QAER3C,KAAKF,SAAS,CAAC8B,cAbmC,wBAAAW,EAAAK,SAAAR,EAAApC,SAAA,yBAAAgC,EAAAa,MAAA7C,KAAA8C,YAAA,KAAApC,IAAA,SAAAqB,MAAA,WAiBlD,IAAMgB,EAAI/C,KAAKP,MAAMmC,UAErB,OAAOmB,EAAI9C,EAAAC,EAAAC,cAAC4C,EAAM/C,KAAKsB,OAAY,SAnBeD,EAAA,CACzBT,cEKVoC,mLAEjB,OACE/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KACEhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACEjD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACxB,UAAWyB,IACjCpD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,KAAK,UAAUvB,UAAWf,IACjCZ,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAUI,GAAG,eAPW1C,aCId2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAAUC,SAASC,eAAe,SDiI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.712bb04b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default function asyncComponent(importComponent) {\n  class AsyncComponent extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        component: null\n      };\n    }\n\n    async componentDidMount() {\n      const { default: component } = await importComponent();\n\n      this.setState({component});\n    }\n\n    render() {\n      const C = this.state.component;\n\n      return C ? <C {...this.props} /> : null;\n    }\n  }\n\n  return AsyncComponent;\n};","import React, { Component } from 'react';\nimport classnames  from 'classnames';\nimport './Home.css';\nconst NAV_CONTENT = ['首页','原创','转载','生活'];\nclass Home extends Component {\n  state = {\n    currentIndex: 0\n  }\n  onNavClick = (index:number) => {\n      this.setState({\n        currentIndex: index\n      })\n  }\n  render() {\n    return (\n      <div className=\"layout source-layout\">\n          <div className=\"navbar\">\n              <ul className=\"navbar-nav\">\n                {\n                  NAV_CONTENT.map((el,index)=> {\n                    return (<li className={classnames({'nav-item': true, 'active': index === this.state.currentIndex})} key={index} onClick={()=> this.onNavClick(index)}>{el}</li>)\n                  })\n                }\n              </ul>\n          </div>\n          <div className=\"main-area\">\n              <div className=\"source\">\n                  <div className=\"entry-list\">\n                    <ul>\n                      \n                    </ul>\n                  </div>\n              </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport asyncComponent from '../utils/asyncComponent';\n\nimport home from \"../pages/home/Home\";\nconst record = asyncComponent(() => import(\"../pages/record/Record\"));\n\n// react-router4 不再推荐将所有路由规则放在同一个地方集中式路由，子路由应该由父组件动态配置，组件在哪里匹配就在哪里渲染，更加灵活\nexport default class Root extends Component{\n  render(){\n    return(\n      <HashRouter>\n        <Switch>\n          <Route path=\"/\" exact component={home} />\n          <Route path=\"/record\" component={record} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </HashRouter>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './router'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}