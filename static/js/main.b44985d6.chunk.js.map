{"version":3,"sources":["pages/home/Home.tsx","utils/asyncComponent.tsx","pages/App/App.tsx","router/index.tsx","serviceWorker.ts","index.tsx"],"names":["reqwest","require","count","fakeDataUrl","concat","Home","state","initLoading","loading","data","list","getData","callback","url","type","method","contentType","success","res","onLoadMore","_data","Object","toConsumableArray","Array","map","name","_this","setState","results","window","dispatchEvent","Event","_this2","this","_this$state","loadMore","_react_16_9_0_react_default","a","createElement","style","textAlign","marginTop","height","lineHeight","es_button","onClick","className","es_list","itemLayout","dataSource","renderItem","item","Item","skeleton","avatar","title","active","Meta","src","href","last","description","Component","asyncComponent","importComponent","_Component","AsyncComponent","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","component","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","_ref","wrap","_context","prev","next","sent","default","stop","apply","arguments","C","Original","__webpack_require__","e","then","bind","Reprint","Essay","NAV_CONTENT","path","selectedStyle","backgroundColor","color","Header","el","index","react_router_dom","to","activeStyle","Footer","Main","react_router","exact","App","App_Header","App_Main","App_Footer","PureComponent","Root","pages_App_App","Boolean","location","hostname","match","ReactDOM","render","router_Root","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wZAIMA,UAAUC,EAAQ,MAElBC,EAAQ,GACRC,EAAW,sCAAAC,OAAyCF,EAAzC,qCA+FFG,6MA5FXC,MAAQ,CACJC,aAAa,EACbC,SAAS,EACTC,KAAM,GACNC,KAAM,MAWVC,QAAU,SAACC,GACPZ,EAAQ,CACJa,IAAKV,EACLW,KAAM,OACNC,OAAQ,MACRC,YAAa,mBACbC,QAAS,SAACC,GACNN,EAASM,SAIrBC,WAAa,WACT,IAAIC,EAAaC,OAAAC,EAAA,EAAAD,CAAI,IAAIE,MAAMrB,IAAQsB,IAAI,iBAAO,CAAEhB,SAAS,EAAMiB,KAAM,MACzEC,EAAKC,SAAS,CACVnB,SAAS,EACTE,KAAMgB,EAAKpB,MAAMG,KAAKL,OAAOgB,KAEjCM,EAAKf,QAAQ,SAAAO,GACT,IAAMT,EAAOiB,EAAKpB,MAAMG,KAAKL,OAAOc,EAAIU,SACxCF,EAAKC,SACD,CACIlB,OACAC,KAAMD,EACND,SAAS,GAEb,WAIIqB,OAAOC,cAAc,IAAIC,MAAM,mGAtC3B,IAAAC,EAAAC,KAChBA,KAAKtB,QAAQ,SAAAO,GACTc,EAAKL,SAAS,CACVpB,aAAa,EACbE,KAAMS,EAAIU,QACVlB,KAAMQ,EAAIU,6CAuCf,IAAAM,EACkCD,KAAK3B,MAApCC,EADH2B,EACG3B,YAAaC,EADhB0B,EACgB1B,QAASE,EADzBwB,EACyBxB,KACxByB,EACD5B,GAAgBC,EAWb,KAVA4B,EAAAC,EAAAC,cAAA,OACIC,MAAO,CACHC,UAAW,SACXC,UAAW,GACXC,OAAQ,GACRC,WAAY,SAGhBP,EAAAC,EAAAC,cAAAM,EAAA,GAAQC,QAASZ,KAAKd,YAAtB,6BAGd,OACEiB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,QACXV,EAAAC,EAAAC,cAAAS,EAAA,GACID,UAAU,qBACVtC,QAASD,EACTyC,WAAW,aACXb,SAAUA,EACVc,WAAYvC,EACZwC,WAAY,SAACC,GAAD,OACRf,EAAAC,EAAAC,cAAAS,EAAA,EAAMK,KAAN,KACIhB,EAAAC,EAAAC,cAAAe,EAAA,GAAUC,QAAM,EAACC,OAAO,EAAO/C,QAAS2C,EAAK3C,QAASgD,QAAM,GACxDpB,EAAAC,EAAAC,cAAAS,EAAA,EAAMK,KAAKK,KAAX,CACIH,OACIlB,EAAAC,EAAAC,cAAAgB,EAAA,GAAQI,IAAI,qEAEhBH,MAAOnB,EAAAC,EAAAC,cAAA,KAAGqB,KAAK,sBAAsBR,EAAK1B,KAAKmC,MAC/CC,YAAY,uGAlFvBC,uCCJJ,SAASC,EAAeC,GAuBrC,OAvB2D,SAAAC,GAGzD,SAAAC,EAAYC,GAAa,IAAAzC,EAAA,OAAAL,OAAA+C,EAAA,EAAA/C,CAAAY,KAAAiC,IACvBxC,EAAAL,OAAAgD,EAAA,EAAAhD,CAAAY,KAAAZ,OAAAiD,EAAA,EAAAjD,CAAA6C,GAAAK,KAAAtC,KAAMkC,KACD7D,MAAQ,CACTkE,UAAW,MAHQ9C,EAHgC,OAAAL,OAAAoD,EAAA,EAAApD,CAAA6C,EAAAD,GAAA5C,OAAAqD,EAAA,EAAArD,CAAA6C,EAAA,EAAAS,IAAA,oBAAAC,MAAA,eAAAC,EAAAxD,OAAAyD,EAAA,EAAAzD,CAAA0D,EAAA1C,EAAA2C,KAAA,SAAAC,IAAA,IAAAC,EAAAV,EAAA,OAAAO,EAAA1C,EAAA8C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAWlBtB,IAXkB,OAAAkB,EAAAE,EAAAG,KAWtCf,EAXsCU,EAW/CM,QAERvD,KAAKN,SAAS,CAAC6C,cAbwC,wBAAAY,EAAAK,SAAAR,EAAAhD,SAAA,yBAAA4C,EAAAa,MAAAzD,KAAA0D,YAAA,KAAAhB,IAAA,SAAAC,MAAA,WAiBvD,IAAMgB,EAAI3D,KAAK3B,MAAMkE,UAErB,OAAOoB,EAAIxD,EAAAC,EAAAC,cAACsD,EAAM3D,KAAKkC,OAAY,SAnBoBD,EAAA,CAC9BJ,aCA/B,IAAM+B,EAAW9B,EAAe,kBAAM+B,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAChCC,EAAUnC,EAAe,kBAAM+B,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAC/BE,EAAQpC,EAAe,kBAAM+B,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAG7BG,EAAc,CAChB,CACI3E,KAAQ,eACR4E,KAAQ,SAEZ,CACI5E,KAAQ,eACR4E,KAAQ,aAEZ,CACI5E,KAAQ,eACR4E,KAAQ,YAEZ,CACI5E,KAAQ,eACR4E,KAAQ,WAIVC,EAAgB,CAClBC,gBAAiB,QACjBC,MAAO,QAGLC,EAAS,kBACXrE,EAAAC,EAAAC,cAAA,cAEQ8D,EAAY5E,IAAI,SAACkF,EAAGC,GAChB,OAAQvE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAASC,GAAIH,EAAGL,KAAMS,YAAeR,EAAe3B,IAAKgC,GAAQD,EAAGjF,UAMtFsF,EAAS,kBACX3E,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,0EAIF0E,EAAO,kBACT5E,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,WACZV,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,KACI7E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,OAAK,EAACb,KAAK,IAAI7B,UAAWnE,IACjC+B,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOZ,KAAK,QAAQ7B,UAAWnE,IAC/B+B,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOZ,KAAK,YAAY7B,UAAWqB,IACnCzD,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOZ,KAAK,WAAW7B,UAAW0B,IAClC9D,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOZ,KAAK,SAAS7B,UAAW2B,IAChC/D,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAUJ,GAAG,SAkBVM,mLAVP,OACI/E,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,QACXV,EAAAC,EAAAC,cAAC8E,EAAD,MACAhF,EAAAC,EAAAC,cAAC+E,EAAD,MACAjF,EAAAC,EAAAC,cAACgF,EAAD,cAPEC,iBC1DGC,mLAEjB,OACEpF,EAAAC,EAAAC,cAACsE,EAAA,EAAD,KACIxE,EAAAC,EAAAC,cAACmF,EAAD,cAJwB3D,aCMd4D,QACW,cAA7B7F,OAAO8F,SAASC,UAEe,UAA7B/F,OAAO8F,SAASC,UAEhB/F,OAAO8F,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO3F,EAAAC,EAAAC,cAAC0F,EAAD,MAAUC,SAASC,eAAe,SDiI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.b44985d6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { List, Avatar, Button, Skeleton } from 'antd';\n// import reqwest from 'reqwest';\nimport './Home.scss';\nconst reqwest = require('reqwest');\n\nconst count = 10;\nconst fakeDataUrl = `https://randomuser.me/api/?results=${count}&inc=name,gender,email,nat&noinfo`;\n\nclass Home extends Component {\n    state = {\n        initLoading: true,\n        loading: false,\n        data: [],\n        list: [],\n    };\n    componentDidMount() {\n        this.getData(res => {\n            this.setState({\n                initLoading: false,\n                data: res.results,\n                list: res.results,\n            });\n        });\n    }\n    getData = (callback: (res: any)=> void) => {\n        reqwest({\n            url: fakeDataUrl,\n            type: 'json',\n            method: 'get',\n            contentType: 'application/json',\n            success: (res: any) => {\n                callback(res);\n            },\n        });\n    };\n    onLoadMore = () => {\n        let _data: any = [...new Array(count)].map(() => ({ loading: true, name: {} }));\n        this.setState({\n            loading: true,\n            list: this.state.data.concat(_data),\n        });\n        this.getData(res => {\n            const data = this.state.data.concat(res.results);\n            this.setState(\n                {\n                    data,\n                    list: data,\n                    loading: false,\n                },\n                () => {\n                    // Resetting window's offsetTop so as to display react-virtualized demo underfloor.\n                    // In real scene, you can using public method of react-virtualized:\n                    // https://stackoverflow.com/questions/46700726/how-to-use-public-method-updateposition-of-react-virtualized\n                    window.dispatchEvent(new Event('resize'));\n                },\n            );\n        });\n    };\n\n  render() {\n      const { initLoading, loading, list } = this.state;\n      const loadMore =\n          !initLoading && !loading ? (\n              <div\n                  style={{\n                      textAlign: 'center',\n                      marginTop: 12,\n                      height: 32,\n                      lineHeight: '32px',\n                  }}\n              >\n                  <Button onClick={this.onLoadMore}>加载更多</Button>\n              </div>\n          ) : null;\n    return (\n      <div className=\"home\">\n          <List\n              className=\"demo-loadmore-list\"\n              loading={initLoading}\n              itemLayout=\"horizontal\"\n              loadMore={loadMore}\n              dataSource={list}\n              renderItem={(item: any) => (\n                  <List.Item>\n                      <Skeleton avatar title={false} loading={item.loading} active>\n                          <List.Item.Meta\n                              avatar={\n                                  <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n                              }\n                              title={<a href=\"https://ant.design\">{item.name.last}</a>}\n                              description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\n                          />\n                      </Skeleton>\n                  </List.Item>\n              )}\n          />\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from \"react\";\n\ninterface IState {\n    component: any,\n}\nexport default function asyncComponent(importComponent: any) {\n  class AsyncComponent extends Component<{}, IState> {\n\n    constructor(props:  any) {\n      super(props);\n      this.state = {\n          component: null\n      }\n    }\n\n    async componentDidMount() {\n      const { default: component } = await importComponent();\n\n      this.setState({component});\n    }\n\n    render() {\n      const C = this.state.component;\n\n      return C ? <C {...this.props} /> : null;\n    }\n  }\n\n  return AsyncComponent;\n};","import React, { PureComponent } from 'react';\nimport { NavLink , Switch, Route , Redirect} from 'react-router-dom';\n// import classnames  from 'classnames';\nimport './App.scss';\nimport Home from \"../home/Home\";\nimport asyncComponent from '../../utils/asyncComponent';\nconst Original = asyncComponent(() => import(\"../original/Original\"));\nconst Reprint = asyncComponent(() => import(\"../reprint/Reprint\"));\nconst Essay = asyncComponent(() => import(\"../essay/Essay\"));\n\n\nconst NAV_CONTENT = [\n    {\n        'name': '首页',\n        'path': '/home'\n    },\n    {\n        'name': '原创',\n        'path': '/original'\n    },\n    {\n        'name': '转载',\n        'path': '/reprint'\n    },\n    {\n        'name': '随笔',\n        'path': '/essay'\n    }\n];\n// 高亮的样式，表示我们在哪个导航下\nconst selectedStyle = {\n    backgroundColor: 'white',\n    color: 'blue'\n};\n\nconst Header = () => (\n    <header>\n        {\n            NAV_CONTENT.map((el,index)=> {\n                return  <NavLink to={el.path} activeStyle = {selectedStyle} key={index}>{el.name}</NavLink>\n            })\n        }\n    </header>\n);\n\nconst Footer = () => (\n    <footer>\n        <div>© 2019-现在 herolewis 版权所有</div>\n    </footer>\n);\n\nconst Main = () => (\n    <main className=\"content\">\n        <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route path='/home' component={Home}/>\n            <Route path='/original' component={Original}/>\n            <Route path='/reprint' component={Reprint}/>\n            <Route path='/essay' component={Essay}/>\n            <Redirect to='/'/>\n        </Switch>\n    </main>\n);\n\nclass App extends PureComponent {\n\n    render() {\n        return (\n            <div className=\"root\">\n                <Header></Header>\n                <Main></Main>\n                <Footer></Footer>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport App from  '../pages/App/App';\n\n\n// react-router4 不再推荐将所有路由规则放在同一个地方集中式路由，子路由应该由父组件动态配置，组件在哪里匹配就在哪里渲染，更加灵活\nexport default class Root extends Component{\n  render(){\n    return(\n      <HashRouter>\n          <App/>\n      </HashRouter>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Root from './router'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}