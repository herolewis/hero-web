{"version":3,"sources":["api/request.tsx","pages/home/Home.tsx","api/getData.tsx","pages/original/Original.tsx","pages/reprint/Reprint.tsx","pages/essay/Essay.tsx","pages/App/App.tsx","router/index.tsx","serviceWorker.ts","index.tsx"],"names":["instance","axios","create","baseURL","timeout","interceptors","request","use","config","url","concat","error","Promise","reject","response","res","data","resolve","TabPane","NewsDetail","withRouter","props","_useState","useState","content","cover","title","_useState2","Object","slicedToArray","detail","setDetail","useEffect","asyncToGenerator","regenerator_default","a","mark","_callee","id","wrap","_context","prev","next","match","params","getListDetail","stop","newsId","http","get","objectSpread2","then","react_default","createElement","className","dangerouslySetInnerHTML","__html","NewsList","_useReducer","useReducer","state","action","type","list","types","typeId","Error","_useReducer2","dispatch","getNews","_ref2","_callee2","result","_context2","page","sent","_x","apply","this","arguments","_callee3","_context3","history","useHistory","handleChange","_ref4","_callee4","_context4","_x2","length","tabs","defaultActiveKey","String","onChange","map","tab","typeName","key","itemLayout","dataSource","renderItem","item","Item","onClick","push","postTime","source","Home","react_router","path","exact","render","to","component","Original","empty","description","Reprint","Essay","Header","Content","Footer","Main","App","current","setCurrent","_useState3","_useState4","sentence","setSentence","_useState5","name","navContent","word","layout","row","col","span","offset","menu","e","find","selectedKeys","mode","el","index","App_Main","Root","react_router_dom","pages_App_App","Component","Boolean","window","location","hostname","ReactDOM","router_Root","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"odAEMA,SAAWC,EAAMC,OAAO,CAC1BC,QAFoB,6BAIpBC,QAAS,MAEbJ,EAASK,aAAaC,QAAQC,IAC1B,SAAAC,GAII,OAHAA,EAAOC,IAAP,GAAAC,OAAgBF,EAAOC,IAAvB,wEAGOD,GAEX,SAAAG,GACI,OAAOC,QAAQC,OAAOF,KAG9BX,EAASK,aAAaS,SAASP,IAE3B,SAAAO,GACI,IAAMC,EAAMD,EAASE,KACrB,OAAOJ,QAAQK,QAAQF,IAE3B,SAAAJ,GACI,OAAOC,QAAQC,OAAOF,KAGfX,QCtBPkB,cAmDFC,EAAaC,YAnCJ,SAACC,GAAU,IAAAC,EACMC,mBAIzB,CACCC,QAAS,GACTC,MAAO,GACPC,MAAO,KARWC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GACfQ,EADeH,EAAA,GACPI,EADOJ,EAAA,GAUtBK,oBAAU,WACNJ,OAAAK,EAAA,EAAAL,CAAAM,EAAAC,EAAAC,KAAC,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACUJ,EAAOjB,EAAMsB,MAAMC,OAAnBN,GACPO,EAAcP,GAFjB,wBAAAE,EAAAM,SAAAT,KAADT,IAID,IACH,IAAMiB,EAAgB,SAACE,GClCE,IAACH,KDmCR,CACVG,OAAQA,GCpCqBC,EAAKC,IAAI,gBAAiB,CAACL,OAAOhB,OAAAsB,EAAA,EAAAtB,CAAA,GAAMgB,MDqCtEO,KAAK,SAAApC,GACDA,EAAIC,MACHe,EAAUhB,EAAIC,SAI1B,OACIoC,EAAAjB,EAAAkB,cAAA,OAAKC,UAAU,UACZF,EAAAjB,EAAAkB,cAAA,UAAKvB,EAAOJ,OACZ0B,EAAAjB,EAAAkB,cAAA,OAAME,wBAAyB,CAACC,OAAQ1B,EAAON,cAUpDiC,EAAW,WAAM,IAAAC,EA2BOC,qBArB1B,SAAmBC,EAAOC,GACtB,OAAOA,EAAOC,MACV,IAAK,aACD,OAAOlC,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAA,GACAgC,GADP,IAEIG,KAAMF,EAAOE,OAErB,IAAK,cACD,OAAOnC,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAA,GACAgC,GADP,IAEII,MAAOH,EAAOG,QAEtB,IAAK,eACD,OAAOpC,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAA,GACAgC,GADP,IAEIK,OAAQJ,EAAOI,SAEvB,QACI,MAAM,IAAIC,QAvBD,CACjBH,KAAM,GACNC,MAAO,GACPC,OAAQ,IAJOE,EAAAvC,OAAAC,EAAA,EAAAD,CAAA8B,EAAA,GA2BZE,EA3BYO,EAAA,GA2BLC,EA3BKD,EAAA,GA4BbE,EAAO,eAAAC,EAAA1C,OAAAK,EAAA,EAAAL,CAAAM,EAAAC,EAAAC,KAAI,SAAAmC,EAAON,GAAP,IAAAO,EAAA,OAAAtC,EAAAC,EAAAI,KAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,cAAA+B,EAAA/B,KAAA,ECrFOE,EDsFa,CAACqB,OAAQA,EAAOS,KAAM,GCtFxB1B,EAAKC,IAAI,aAAc,CAACL,OAAOhB,OAAAsB,EAAA,EAAAtB,CAAA,GAAMgB,KDqFvD,OACP4B,EADOC,EAAAE,KAEbP,EAAS,CAACN,KAAM,aAAcC,KAAMS,EAAOxD,OAF9B,wBAAAyD,EAAA3B,OCrFM,IAACF,GDqFP2B,MAAJ,gBAAAK,GAAA,OAAAN,EAAAO,MAAAC,KAAAC,YAAA,GAIb/C,oBAAU,WACNJ,OAAAK,EAAA,EAAAL,CAAAM,EAAAC,EAAAC,KAAC,SAAA4C,IAAA,IAAAhB,EAAA,OAAA9B,EAAAC,EAAAI,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,cAAAuC,EAAAvC,KAAA,EC3FoBE,ED4FgB,GC5FLI,EAAKC,IAAI,cAAe,CAACL,OAAOhB,OAAAsB,EAAA,EAAAtB,CAAA,GAAMgB,KD2FrE,cACSoB,EADTiB,EAAAN,KAEGP,EAAS,CAACN,KAAM,cAAeE,MAAOA,EAAMhD,OAC5CoD,EAAS,CAACN,KAAM,eAAgBG,OAAQD,EAAMhD,KAAK,GAAGiD,SAHzDgB,EAAAvC,KAAA,EAIS2B,EAAQL,EAAMhD,KAAK,GAAGiD,QAJ/B,wBAAAgB,EAAAnC,OC3FmB,IAACF,GD2FpBoC,KAADpD,IAMD,IACH,IAAMsD,EAAUC,cACVC,EAAY,eAAAC,EAAAzD,OAAAK,EAAA,EAAAL,CAAAM,EAAAC,EAAAC,KAAG,SAAAkD,EAAOrB,GAAP,OAAA/B,EAAAC,EAAAI,KAAA,SAAAgD,GAAA,cAAAA,EAAA9C,KAAA8C,EAAA7C,MAAA,cACjB0B,EAAS,CAACN,KAAM,eAAgBG,OAAQA,IADvBsB,EAAA7C,KAAA,EAEX2B,EAAQJ,GAFG,wBAAAsB,EAAAzC,SAAAwC,MAAH,gBAAAE,GAAA,OAAAH,EAAAR,MAAAC,KAAAC,YAAA,GAOlB,OACI3B,EAAAjB,EAAAkB,cAAA,OAAKC,UAAU,QAEPM,EAAMI,MAAMyB,OAAS,GAAKrC,EAAAjB,EAAAkB,cAAAqC,EAAA,GACtBC,iBAAkBC,OAAOhC,EAAMK,QAC/B4B,SAAUT,GAENxB,EAAMI,MAAM8B,IAAI,SAAChC,GACb,OAAQV,EAAAjB,EAAAkB,cAACnC,EAAD,CAAS6E,IAAKjC,EAAKkC,SAAUC,IAAKnC,EAAKG,QAEvCL,EAAMG,MAAQH,EAAMG,KAAK0B,OAAS,GAAMrC,EAAAjB,EAAAkB,cAAAU,EAAA,GACpCmC,WAAW,aACXC,WAAYvC,EAAMG,KAClBqC,WAAY,SAACC,GAAD,OACRjD,EAAAjB,EAAAkB,cAAAU,EAAA,EAAMuC,KAAN,CAAWC,QAAS,kBAjB1CxD,EAiByDsD,EAAKtD,YAhB5EmC,EAAQsB,KAAR,gBAAA9F,OAA6BqC,IADhB,IAACA,IAkB0BK,EAAAjB,EAAAkB,cAAA,WAAMgD,EAAK3E,OACX0B,EAAAjB,EAAAkB,cAAA,OAAKC,UAAU,aACXF,EAAAjB,EAAAkB,cAAA,YAAOgD,EAAKI,UACZrD,EAAAjB,EAAAkB,cAAA,YAAOgD,EAAKK,mBA6BjDC,EAdF,WACT,OAAOvD,EAAAjB,EAAAkB,cAAA,WACHD,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,KACIxD,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAC1B3D,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAUI,GAAG,kBAEjB5D,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAOC,KAAK,QAAQC,OAAK,EAACC,OAAQ,kBAC9B3D,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAUI,GAAG,kBAEjB5D,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAOE,OAAK,EAACD,KAAK,aAAaI,UAAWxD,IAC1CL,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAOE,OAAK,EAACD,KAAK,mBAAmBI,UAAW9F,uBE5I7C+F,UARE,WACb,OACI9D,EAAAjB,EAAAkB,cAAA,OAAKC,UAAU,YACXF,EAAAjB,EAAAkB,cAAA8D,EAAA,GAAOC,YAAY,gCCIhBC,EARC,WACZ,OACIjE,EAAAjB,EAAAkB,cAAA,OAAKC,UAAU,WACXF,EAAAjB,EAAAkB,cAAA8D,EAAA,GAAOC,YAAY,+BCKhBE,EAPD,WACV,OACIlE,EAAAjB,EAAAkB,cAAA,OAAKC,UAAU,SACXF,EAAAjB,EAAAkB,cAAA8D,EAAA,GAAOC,YAAY,+BCGvBG,aAAQC,cAASC,aAOnBC,EAAO,kBACTtE,EAAAjB,EAAAkB,cAAA,QAAMC,UAAU,WACZF,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,KACIxD,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAOE,OAAK,EAACD,KAAK,IAAII,UAAWN,IACjCvD,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAOC,KAAK,QAAQI,UAAWN,IAC/BvD,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAOC,KAAK,YAAYI,UAAWC,IACnC9D,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAOC,KAAK,WAAWI,UAAWI,IAClCjE,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAOC,KAAK,SAASI,UAAWK,IAChClE,EAAAjB,EAAAkB,cAACuD,EAAA,EAAD,CAAUI,GAAG,SA0EVW,EArEH,WAAM,IAAArG,EACgBC,mBAAiB,QADjCI,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GACPsG,EADOjG,EAAA,GACEkG,EADFlG,EAAA,GAAAmG,EAEkBvG,mBAAiB,IAFnCwG,EAAAnG,OAAAC,EAAA,EAAAD,CAAAkG,EAAA,GAEPE,EAFOD,EAAA,GAEGE,EAFHF,EAAA,GAAAG,EAGO3G,mBAAkC,CACnD,CACI4G,KAAQ,eACRtB,KAAQ,QACRZ,IAAO,QAEX,CACIkC,KAAQ,eACRtB,KAAQ,YACRZ,IAAO,YAEX,CACIkC,KAAQ,eACRtB,KAAQ,WACRZ,IAAO,WAEX,CACIkC,KAAQ,eACRtB,KAAQ,SACRZ,IAAO,WAnBRmC,EAHOxG,OAAAC,EAAA,EAAAD,CAAAsG,EAAA,MAyBRhD,EAAUC,cAehB,OAPAnD,oBAAU,WACNJ,OAAAK,EAAA,EAAAL,CAAAM,EAAAC,EAAAC,KAAC,SAAAC,IAAA,IAAAmC,EAAA6D,EAAA,OAAAnG,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EJ1DmBE,EI2De,GJ3DJI,EAAKC,IAAI,wBAAyB,CAACL,OAAOhB,OAAAsB,EAAA,EAAAtB,CAAA,GAAMgB,KI0D9E,OACO4B,EADPhC,EAAAmC,KAEO0D,EAAO7D,EAAOxD,MAAQwD,EAAOxD,KAAK,GAAGQ,QACzCyG,EAAYI,GAHf,wBAAA7F,EAAAM,OJ1DkB,IAACF,GI0DnBP,KAADT,IAKF,IAEEwB,EAAAjB,EAAAkB,cAAA,OAAKC,UAAU,QACXF,EAAAjB,EAAAkB,cAAAiF,EAAA,GAAQhF,UAAU,cACdF,EAAAjB,EAAAkB,cAACkE,EAAD,CAAQjE,UAAU,cACdF,EAAAjB,EAAAkB,cAAAkF,EAAA,OACInF,EAAAjB,EAAAkB,cAAAmF,EAAA,GAAKC,KAAM,IACXrF,EAAAjB,EAAAkB,cAAAmF,EAAA,GAAKC,KAAM,EAAGC,OAAQ,GAClBtF,EAAAjB,EAAAkB,cAAAsF,EAAA,GAAMpC,QArBV,SAACqC,GACjBf,EAAWe,EAAE3C,KACb,IAEIY,EAFauB,EAAWS,KAAK,SAACxC,GAAD,OAAUA,EAAKJ,MAAQ2C,EAAE3C,MAEnCY,KACvB3B,EAAQsB,KAAKK,IAgBmCiC,aAAc,CAAClB,GAAUmB,KAAK,cAElDX,EAAWtC,IAAI,SAACkD,EAAoBC,GAChC,OAAO7F,EAAAjB,EAAAkB,cAAAsF,EAAA,EAAMrC,KAAN,CAAWL,IAAK+C,EAAG/C,KAAM+C,EAAGb,YAQ3D/E,EAAAjB,EAAAkB,cAACmE,EAAD,CAASlE,UAAU,eACfF,EAAAjB,EAAAkB,cAAC6F,EAAD,OAEJ9F,EAAAjB,EAAAkB,cAACoE,EAAD,CAAQnE,UAAU,cACb0E,MCrFAmB,yKAEjB,OACE/F,EAAAjB,EAAAkB,cAAC+F,EAAA,EAAD,KACIhG,EAAAjB,EAAAkB,cAACgG,EAAD,cAJwBC,aCMdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/G,MACvB,2DCVNgH,IAAS5C,OAAO3D,EAAAjB,EAAAkB,cAACuG,EAAD,MAAUC,SAASC,eAAe,SDiI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9G,KAAK,SAAA+G,GACjCA,EAAaC","file":"static/js/main.77c2e94b.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseURL: string = 'https://www.mxnzp.com/api/';\nconst instance = axios.create({\n    baseURL, // 公共地址\n    // withCredentials: true, // send cookies when cross-domain requests\n    timeout: 3000 // 超时\n});\ninstance.interceptors.request.use(\n    config => {\n        config.url = `${config.url}?app_id=ykholzngnvdqlrvn&app_secret=RVBocWEzUFJkYm1yMlFobHVnNnFtdz09`;\n        // 请求头携带token\n        // config.headers['AuthToken'] = 'your.token';\n        return config;\n    },\n    error => {\n        return Promise.reject(error)\n    }\n);\ninstance.interceptors.response.use(\n    // @ts-ignore\n    response => {\n        const res = response.data;\n        return Promise.resolve(res);\n    },\n    error => {\n        return Promise.reject(error)\n    }\n);\nexport default instance;","import React, { useState, useEffect, useReducer} from 'react';\nimport { Switch, Route , Redirect, useHistory, withRouter} from 'react-router-dom';\n// import classnames from 'classnames';\nimport './Home.scss';\nimport { getNewsList , getNewsTypes, getNewsDetail} from '../../api/getData';\nimport { List , Tabs } from 'antd';\nconst { TabPane } = Tabs;\n\ninterface listItem {\n    title: string,\n    imgList: null | string,\n    source: string,\n    newsId: string,\n    digest?: string,\n    postTime: string\n}\ninterface typeItem {\n    typeId: number,\n    typeName: string\n}\n\n\nconst Detail = (props) => {\n    const [detail, setDetail] = useState<{\n        content: string,\n        cover: string,\n        title: string\n    }>({\n        content: '',\n        cover: '',\n        title: ''\n    });\n    useEffect(()=> {\n        (async () => {\n           const { id } = props.match.params;\n            getListDetail(id);\n        })();\n    }, []);\n    const getListDetail = (newsId: string) => {\n        getNewsDetail({\n            newsId: newsId\n        }).then(res => {\n            if(res.data) {\n                setDetail(res.data);\n            }\n        })\n    }\n    return (\n        <div className=\"detail\">\n           <h2>{detail.title}</h2>\n           <div  dangerouslySetInnerHTML={{__html: detail.content}}>\n\n           </div>\n        </div>\n    );\n}\n\nconst NewsDetail = withRouter(Detail);\n\n\nconst NewsList = () => {\n    const initialState = {\n        list: [],\n        types: [],\n        typeId: 0,\n    };\n    function myReducer(state, action) {\n        switch(action.type) {\n            case 'changeList':\n                return {\n                    ...state,\n                    list: action.list\n                }\n            case 'changeTypes':\n                return {\n                    ...state,\n                    types: action.types\n                }\n            case 'changeTypeId':\n                return {\n                    ...state,\n                    typeId: action.typeId\n                }\n            default:\n                throw new Error();\n        }\n    }\n    const [state, dispatch] = useReducer(myReducer, initialState);\n    const getNews = (async (typeId:number) => {\n        const result = await getNewsList({typeId: typeId,page: 1});\n        dispatch({type: 'changeList', list: result.data})\n    });\n    useEffect(()=> {\n        (async () => {\n            const types = await getNewsTypes({});\n            dispatch({type: 'changeTypes', types: types.data});\n            dispatch({type: 'changeTypeId', typeId: types.data[0].typeId});\n            await getNews(types.data[0].typeId);\n        })();\n    }, []);\n    const history = useHistory();\n    const handleChange = async (typeId) => {\n        dispatch({type: 'changeTypeId', typeId: typeId});\n        await getNews(typeId);\n    }\n    const goDetail = (newsId: string) => {\n        history.push(`/home/detail/${newsId}`);\n    }\n    return (\n        <div className=\"home\">\n            {\n                state.types.length > 0 && <Tabs\n                    defaultActiveKey={String(state.typeId)}\n                    onChange={handleChange}>\n                    {\n                        state.types.map((type: typeItem) => {\n                            return  <TabPane tab={type.typeName} key={type.typeId}>\n                                {\n                                    state.list && state.list.length > 0 &&  <List\n                                        itemLayout=\"horizontal\"\n                                        dataSource={state.list}\n                                        renderItem={(item: listItem) => (\n                                            <List.Item onClick={() => goDetail(item.newsId)}>\n                                                <div>{item.title}</div>\n                                                <div className=\"post-time\">\n                                                    <span>{item.postTime}</span>\n                                                    <span>{item.source}</span>\n                                                </div>\n                                            </List.Item>\n                                        )}\n                                    />\n                                }\n                            </TabPane>\n                        })\n                    }\n                </Tabs>\n            }\n        </div>\n    );\n}\n\nconst Home = () => {\n    return <div>\n        <Switch>\n            <Route path='/' exact render={()=> (\n                <Redirect to='/home/list'/>\n            )}/>\n            <Route path='/home' exact render={()=> (\n                <Redirect to='/home/list'/>\n            )}/>\n            <Route exact path='/home/list' component={NewsList}/>\n            <Route exact path='/home/detail/:id' component={NewsDetail}/>\n        </Switch>\n    </div>\n}\nexport default Home;","import http from './request';\n\nexport const getNewsTypes = (params) => http.get('/news/types', {params: { ...params }});\nexport const getNewsList = (params) => http.get('/news/list', {params: { ...params }});\nexport const getNewsDetail = (params) => http.get('/news/details', {params: { ...params }});\nexport const getSentence = (params) => http.get('/daily_word/recommend', {params: { ...params }});\n","import React from 'react';\nimport './Original.scss';\nimport { Empty } from 'antd';\nconst Original = () => {\n    return (\n        <div className=\"Original\">\n            <Empty description=\"暂无数据\"></Empty>\n        </div>\n    );\n}\n\nexport default Original;","import React from 'react';\nimport { Empty } from 'antd';\nconst Reprint = () => {\n    return (\n        <div className=\"Reprint\">\n            <Empty description=\"暂无数据\"></Empty>\n        </div>\n    );\n}\n\nexport default Reprint;","import React from 'react';\nimport { Empty } from 'antd';\n\nconst Essay = () => {\n    return (\n        <div className=\"essay\">\n            <Empty description=\"暂无数据\"></Empty>\n        </div>\n    );\n}\nexport default Essay;","import React, { useState,useEffect } from 'react';\nimport { Switch, Route , Redirect , useHistory} from 'react-router-dom';\nimport { Layout , Menu,Row, Col } from 'antd';\nimport './App.scss';\nimport Home from \"../home/Home\";\nimport Original from \"../original/Original\";\nimport Reprint from \"../reprint/Reprint\";\nimport Essay from \"../essay/Essay\";\nimport { getSentence } from \"../../api/getData\";\nconst { Header, Content, Footer } = Layout;\n\ninterface navItemInterface {\n    name: string,\n    path: string,\n    key: string\n}\nconst Main = () => (\n    <main className=\"content\">\n        <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route path='/home' component={Home}/>\n            <Route path='/original' component={Original}/>\n            <Route path='/reprint' component={Reprint}/>\n            <Route path='/essay' component={Essay}/>\n            <Redirect to='/'/>\n        </Switch>\n    </main>\n);\n\nconst App = () => {\n    const [current, setCurrent] = useState<string>('home');\n    const [sentence, setSentence] = useState<string>('');\n    const [navContent] = useState<Array<navItemInterface>>([\n        {\n            'name': '首页',\n            'path': '/home',\n            'key': 'home'\n        },\n        {\n            'name': '原创',\n            'path': '/original',\n            'key': 'original'\n        },\n        {\n            'name': '转载',\n            'path': '/reprint',\n            'key': 'reprint'\n        },\n        {\n            'name': '随笔',\n            'path': '/essay',\n            'key': 'essay'\n        }\n    ]);\n    const history = useHistory();\n    const HandleClick = (e: any) => {\n        setCurrent(e.key);\n        let currentNav = navContent.find((item) => item.key === e.key);\n        //非空断言操作符\n        let path = currentNav!.path;\n        history.push(path);\n    }\n    useEffect(()=> {\n        (async () => {\n            let result = await getSentence({});\n            let word = result.data && result.data[0].content;\n            setSentence(word)\n        })()\n    },[])\n    return (\n        <div className=\"root\">\n            <Layout className=\"lan-layout\">\n                <Header className=\"lan-header\">\n                    <Row>\n                        <Col span={8}></Col>\n                        <Col span={8} offset={8}>\n                            <Menu onClick={HandleClick} selectedKeys={[current]} mode=\"horizontal\">\n                                {\n                                    navContent.map((el:navItemInterface,index: number) => {\n                                        return <Menu.Item key={el.key}>{el.name}</Menu.Item>\n                                    })\n                                }\n                            </Menu>\n                        </Col>\n                    </Row>\n\n                </Header>\n                <Content className=\"lan-content\">\n                    <Main></Main>\n                </Content>\n                <Footer className=\"lan-footer\">\n                    {sentence}\n                </Footer>\n            </Layout>\n        </div>\n    )\n}\n\nexport default App;","import React, { Component } from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport App from  '../pages/App/App';\n\n\n// react-router4 不再推荐将所有路由规则放在同一个地方集中式路由，子路由应该由父组件动态配置，组件在哪里匹配就在哪里渲染，更加灵活\nexport default class Root extends Component{\n  render(){\n    return(\n      <HashRouter>\n          <App/>\n      </HashRouter>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css/normalize.css';\nimport Root from './router'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}